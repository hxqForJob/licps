package com.hxq.web.action.cargo;

import java.util.List;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import org.apache.struts2.convention.annotation.Action;
import org.apache.struts2.convention.annotation.Namespace;
import org.apache.struts2.convention.annotation.Result;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.jpa.domain.Specification;

import com.hxq.domain.Contract;
import com.hxq.domain.ContractProduct;
import com.hxq.domain.Factory;
import com.hxq.domain.User;
import com.hxq.service.ContractProductService;
import com.hxq.service.FactoryService;
import com.hxq.utils.Page;
import com.hxq.utils.SysConstant;
import com.hxq.web.action.BaseAction;
import com.opensymphony.xwork2.ModelDriven;


//购销合同下的产品控制器
@Namespace("/cargo")
@Result(name="toCProList",type="redirectAction",location="contractProductAction_tocreate?contract.id=${contract.id}")
public class ContractProductAction extends BaseAction implements ModelDriven<ContractProduct> {

	private ContractProduct model = new ContractProduct();

	@Override
	public ContractProduct getModel() {
		// TODO Auto-generated method stub
		return model;
	}

	private Page<ContractProduct> page = new Page<>();

	public Page<ContractProduct> getPage() {
		return page;
	}

	public void setPage(Page<ContractProduct> page) {
		this.page = page;
	}

	@Autowired
	private ContractProductService contractProductService;
	
	@Autowired
	private FactoryService factoryService;

	/**
	 * 查询货物,创建货物视图
	 * @return
	 */
	@Action(value = "contractProductAction_tocreate", results = {
			@Result(name = "toContactProductCreate", location = "/WEB-INF/pages/cargo/contract/jContractProductCreate.jsp") })
	public String tocreate() {
		
		// 1.加载生产厂家列表 ctype="货物" and state=1
				Specification<Factory> spec = new Specification<Factory>() {
					public Predicate toPredicate(Root<Factory> root, CriteriaQuery<?> query, CriteriaBuilder cb) {
						Predicate p1 = cb.equal(root.get("ctype").as(String.class), "货物");
						Predicate p2 = cb.equal(root.get("state").as(Integer.class), 1);
						return cb.and(p1, p2);//两个条件用and,or等进行连接
					}
				};
				List<Factory> factoryList = factoryService.find(spec);
				// 2.将factoryList放入值栈中
				super.put("factoryList", factoryList);
		
		//货物查询
		org.springframework.data.domain.Page<ContractProduct> findPage = contractProductService
				.findPage(new Specification<ContractProduct>() {

					@Override
					public Predicate toPredicate(Root<ContractProduct> root, CriteriaQuery<?> query,
							CriteriaBuilder cb) {
						// TODO Auto-generated method stub
						return cb.equal(root.get("contract").get("id"), model.getContract().getId());
					}
				}, new PageRequest(page.getPageNo() - 1, page.getPageSize()));
		page.setTotalRecord(findPage.getTotalElements());
		page.setResults(findPage.getContent());
		page.setTotalPage(findPage.getTotalPages());
		page.setUrl("contractProductAction_tocreate");
		push(page);
		return "toContactProductCreate";
	}
	
	/**
	 * 添加购销合同下的货物
	 * @return
	 */
	@Action("contractProductAction_insert")
	public String insertContractProduct()
	{
		contractProductService.saveOrUpdate(model);
		return "toCProList";
	}
	
	/**
	 * 更新货物视图
	 * @return
	 */
	@Action(value="contractProductAction_toupdate",results={@Result(name="toUpdateView",location="/WEB-INF/pages/cargo/contract/jContractProductUpdate.jsp")})
	public String updateContractProductView()
	{
		// 1.加载生产厂家列表 ctype="货物" and state=1
		Specification<Factory> spec = new Specification<Factory>() {
			public Predicate toPredicate(Root<Factory> root, CriteriaQuery<?> query, CriteriaBuilder cb) {
				Predicate p1 = cb.equal(root.get("ctype").as(String.class), "货物");
				Predicate p2 = cb.equal(root.get("state").as(Integer.class), 1);
				return cb.and(p1, p2);//两个条件用and,or等进行连接
			}
		};
		List<Factory> factoryList = factoryService.find(spec);
		// 2.将factoryList放入值栈中
		super.put("factoryList", factoryList);
		//查询当前货物信息
		ContractProduct contractProduct = contractProductService.get(model.getId());
		push(contractProduct);
		
		return "toUpdateView";
	}
	
	/**
	 * 更新货物
	 * @return
	 */
	@Action("contractProductAction_update")
	public String updateContractProduct()
	{
		ContractProduct contractProduct = contractProductService.get(model.getId());
		contractProduct.setFactory(model.getFactory());
		contractProduct.setFactoryName(model.getFactoryName());
		contractProduct.setProductNo(model.getProductNo());
		contractProduct.setProductImage(model.getProductImage());
		contractProduct.setCnumber(model.getCnumber());
		contractProduct.setPackingUnit(model.getPackingUnit());
		contractProduct.setLoadingRate(model.getLoadingRate());
		contractProduct.setBoxNum(model.getBoxNum());
		contractProduct.setPrice(model.getPrice());
		contractProduct.setOrderNo(model.getOrderNo());
		contractProduct.setProductDesc(model.getProductDesc());
		contractProduct.setProductRequest(model.getProductRequest());
		contractProductService.saveOrUpdate(contractProduct);
		return "toCProList";
	}
	
	/**
	 * 删除货物
	 * @return
	 */
	@Action("contractProductAction_delete")
	public String deleteContractProduct()
	{
		contractProductService.deleteById(model.getId());
		return "toCProList";
	}
}
